[{"react":[{"id":"lgFIywzgqvu2Utc0Yhfr9","title":"React简介","content":"<p>React不只是一个框架，它的应用不局限于web开发</p><p>React和ReactDOM才属于web框架</p><pre class=\"ql-syntax\" spellcheck=\"false\">    import&nbsp;React&nbsp;from&nbsp;'react'; \n    import&nbsp;ReactDOM&nbsp;from&nbsp;'react-dom'; \n    import&nbsp;logo&nbsp;from&nbsp;'./logo.svg'; &nbsp;&nbsp;&nbsp;&nbsp;\n    import&nbsp;'./App.css'; \n</pre><ul><li>引入React为了将代码中的&nbsp;JSX&nbsp;语句转为React.createElement()，所有的&nbsp;React&nbsp;模块都应该引入&nbsp;React&nbsp;模块</li><li>引入ReactDom，将 JSX 转化为 真实Dom</li><li>ReactDOM.render([jsx],[container],[callback]):把JSX渲染到页面中</li><li>JSX中的{}可以使用Number,String,Array类型会依次遍历(基本数据类型/JSX对象),对象报错,其余不显示</li><li>如果没有指定模块路径，表明它来自于package.json中的依赖项</li><li>引入CSS文件没有用到&nbsp;from&nbsp;指令，是因为webpack</li></ul>","important":2},{"id":"xmjUkxiMm3frrmZOs_jcp","title":"Hook特点","content":"<p><br></p>","important":1},{"id":"FHdcdF36nuiDOvT9GD-wq","title":"Hook应用","content":"","important":1},{"id":"9nG-msePcXY8-BNFO5xeu","title":"useState","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;[state,&nbsp;setState]&nbsp;=&nbsp;useState({});\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;更新合并对象方式，也可以使用&nbsp;Object.assign\n&nbsp;&nbsp;&nbsp;&nbsp;setState(prevState&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{...prevState,&nbsp;...updatedValues};\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果初始state需要复杂计算获得，则使用回调函数\n&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;[state,&nbsp;setState]&nbsp;=&nbsp;useState(()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;initialState&nbsp;=&nbsp;someExpensiveComputation(props);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;initialState;\n&nbsp;&nbsp;&nbsp;&nbsp;});\n</pre><p>React&nbsp;使用&nbsp;Object.is&nbsp;比较算法&nbsp;来比较&nbsp;state</p>","important":5},{"id":"xhFB-c3fm6Ru6kxz2TaK5","title":"useEffect","content":"<p>副作用：</p><ol><li>数据获取</li><li>订阅</li><li>手动修改DOM操作</li></ol><p>参数：</p><p>第一个参数为函数，React保存这个函数（称为effect）并在DOM更新后调用它(添加订阅)</p><p>第二个参数为控制参数</p><ul><li>不设置时每次渲染都会执行effect</li><li>设置为[]时只在组件挂载/卸载时执行</li><li>设置为[value]]可以控制参数value改变时执行</li></ul><p>注意：</p><ul><li>如果使用useEffect的子组件被多次引用，则useEffect会执行多次</li><li>可以在函数中返回一个回调函数，来指定如何清除effect</li><li>useEffect相当于componentDidMount、componentDidUpdate、componentWillUnmount的组合成的API</li></ul>","important":5},{"id":"Die4rKBA9X1B8y6Wlwe94","title":"useLayoutEffect","content":"<p>同步调用&nbsp;effect&nbsp;的&nbsp;useEffect</p><p>开始先用&nbsp;useEffect，只有当它出问题的时候再尝试使用&nbsp;useLayoutEffect</p>","important":4},{"id":"mNjKIkGQSo0yM1Skz8ASx","title":"useRef","content":"<p>非响应式Ref：</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;inputEl&nbsp;=&nbsp;useRef(null);\n&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;onButtonClick&nbsp;=&nbsp;()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEl.current.focus();\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;ref={inputEl}&nbsp;type=\"text\"&nbsp;/&gt;\n</pre><p><br></p><p>响应式Ref：回调Ref</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;inputEl&nbsp;=&nbsp;useCallback(node&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(node&nbsp;!==&nbsp;null)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputEl.current.focus();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;[]);\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;ref={inputEl}&nbsp;type=\"text\"&nbsp;/&gt;\n</pre>","important":5},{"id":"Wl9qZWn67s015njsQWrnT","title":"useCallback（缓存函数）","content":"<p>useCallback(fn,&nbsp;deps)&nbsp;相当于&nbsp;useMemo(()&nbsp;=&gt;&nbsp;fn,&nbsp;deps)</p><p>所有回调函数fn中引用的值都应该出现在依赖项数组deps中</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;memoizedCallback&nbsp;=&nbsp;useCallback(()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doSomething(a,&nbsp;b);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},[a,&nbsp;b],\n&nbsp;&nbsp;&nbsp;&nbsp;);\n</pre>","important":5},{"id":"G6aQ6sKkHspD6czYvWPVk","title":"useMemo（缓存值）","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;memoizedValue&nbsp;=&nbsp;useMemo(()&nbsp;=&gt;&nbsp;computeExpensiveValue(a,&nbsp;b),&nbsp;[a,&nbsp;b])\n</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;相当于计算属性，仅在依赖改变时才重新计算memoized值</p><p>&nbsp;&nbsp;&nbsp;&nbsp;如果没有提供依赖项数组，useMemo&nbsp;在每次渲染时都会计算新的值</p><p>&nbsp;&nbsp;&nbsp;&nbsp;先编写在没有&nbsp;useMemo&nbsp;的情况下也可以执行的代码，之后再在你的代码中添加&nbsp;useMemo，以达到优化性能的目的</p>","important":5},{"id":"hxT-laO3vXwshZATkbV1Q","title":"useContext","content":"<p>父组件</p><pre class=\"ql-syntax\" spellcheck=\"false\">  export&nbsp;const&nbsp;GlobalContext&nbsp;=&nbsp;React.createContext({})\n  export&nbsp;const&nbsp;SetGlobalContext&nbsp;=&nbsp;React.createContext({})\n  \n  function&nbsp;Container(props:any){\n  &nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;[value,&nbsp;setvalue]&nbsp;=&nbsp;useState(false)\n  \n  &nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;GlobalContext.Provider&nbsp;value={value}&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;SetGlobalContext.Provider&nbsp;value={setvalue}&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/*&nbsp;App组件&nbsp;*/}\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{props.children}\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/SetGlobalContext.Provider&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/GlobalContext.Provider&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;)\n  }\n</pre><p>子组件</p><pre class=\"ql-syntax\" spellcheck=\"false\">  const&nbsp;global&nbsp;=&nbsp;useContext(GlobalContext)\n  const&nbsp;setGlobal:any&nbsp;=&nbsp;useContext(SetGlobalContext)\n</pre><p>相当于Class组件的static&nbsp;global&nbsp;=&nbsp;GlobalContext</p>","important":5},{"id":"fLauEf19Ha13ztVOPHYoz","title":"useReducer","content":"<p>useReducer</p>","important":4},{"id":"7dhCzLcA4SVxbUz6_SFXj","title":"自定义Hook","content":"<p><br></p>","important":1},{"id":"g92R9vgNBbXUMVwSRFn3J","title":"自定义Hook","content":"<p>获取上一轮的state</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;usePrevious(value)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;ref&nbsp;=&nbsp;useRef();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useEffect(()&nbsp;=&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ref.current&nbsp;=&nbsp;value;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;ref.current;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;[count,&nbsp;setCount]&nbsp;=&nbsp;useState(0);\n&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;prevCount&nbsp;=&nbsp;usePrevious(count);\n</pre>","important":1},{"id":"9DOJv7D12TTz35q-WEXJ0","title":"Class组件 vs 函数式组件","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;Dialog&nbsp;extends&nbsp;React.Component{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constructor(props,context,updater)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;this.props:属性集合\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;this.refs:ref集合(非受控)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;this.context:上下文\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre><ul><li>函数式组件this为undefined，类组件this为当前实例</li><li>函数式组件使用普通方法执行，类组件使用new方法执行，创建一个实例，执行constructor之后，执行this.render()，之后通过JSX转换渲染(类组件必须有render方法)</li><li>super()默认this.props是undefined，通过super(props)，props才挂载到实例上，可以使用this.props</li><li>即使不使用super(props)，类中除constructor外的方法中仍能使用this.props</li></ul>","important":4},{"id":"eldqyoWVr63tHqL845RQ5","title":"11","content":"<p>22</p>","important":1}],"vue":[{"id":"ccbjbnMH4mAoOkn3kzpRK","title":"Vue简介","content":"<p>322</p>","important":1},{"id":"t5FobLnmBAtp42nOmLbxT","title":"111","content":"<p>22</p>","important":4},{"id":"KxpXM9OKQsbcuaxOh1u_k","title":"11","content":"<p>22</p>","important":4},{"id":"OSO1ZbJ6tGvK-nFBD0wfy","title":"111","content":"<p>22</p>","important":1},{"id":"XcGS8n4c_mU9rS-DQloi_","title":"","content":"<p>33</p>","important":3},{"id":"HjvA9ngI0-GNb3pAEN21v","title":"Vuex","content":"<p>state单一状态树：唯一数据源</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;computed:&nbsp;mapState({\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;箭头函数可使代码更简练\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count:&nbsp;state&nbsp;=&gt;&nbsp;state.count,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;传字符串参数&nbsp;'count'&nbsp;等同于&nbsp;`state&nbsp;=&gt;&nbsp;state.count`\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countAlias:&nbsp;'count',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;为了能够使用&nbsp;`this`&nbsp;获取局部状态，必须使用常规函数\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countPlusLocalState&nbsp;(state)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;state.count&nbsp;+&nbsp;this.localCount\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})\n</pre><p>简写为</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;computed:&nbsp;mapState(['count'])\n</pre><p>getter从state中派生状态：store中的计算属性</p><p><br></p><p>mutations类似于JS同步事件：需要触发器&nbsp;store.commit&nbsp;</p><p><br></p><p>actions异步的mutations事件</p>","important":5}],"node":[{"id":"3EVhf4MrbkuV4MbzG_GZq","title":"模块化","content":"<p>目的：提高代码利用率</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Commonjs(同步加载/同步执行/Nodejs的模块规范)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;require&nbsp;加载模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;对外输出接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp;AMD(异步加载/异步执行)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;require&nbsp;加载模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;require.config&nbsp;指定引用路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;define&nbsp;定义模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;CMD(异步加载/同步执行/sea.js)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;加载模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;define&nbsp;定义模块</p><p>&nbsp;&nbsp;&nbsp;&nbsp;ES&nbsp;module是ES6的模块规范(异步加载/同步执行)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;import&nbsp;输入其他模块提供的功能</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;export&nbsp;对外输出接口</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;~(function(name,definition){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hasDefine&nbsp;=&nbsp;typeof&nbsp;define&nbsp;===&nbsp;'function',\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hasExports&nbsp;=&nbsp;typeof&nbsp;module&nbsp;!==&nbsp;'undefined'&nbsp;&amp;&amp;&nbsp;module.exports;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(hasDefine){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;define(definition)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('AMD&nbsp;or&nbsp;CMD')\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else&nbsp;if(hasExports){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;=&nbsp;definition()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('CommonJS')\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this[name]&nbsp;=&nbsp;definition\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('Window')\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;})('hello',function(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hello&nbsp;=&nbsp;function(){};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;hello;\n&nbsp;&nbsp;&nbsp;&nbsp;})\n</pre>","important":4},{"id":"XQR09j75ibzxH7YyrIGJi","title":"11","content":"<p>22</p>","important":1},{"id":"Fin5peiy3gZQNs_8gG3U_","title":"webpack打包过程","content":"<p>读取主模块内容(一般是index.js)</p><p>分析模块(使用@babel/parser将模块内容解析成AST语法树,类似于JSX解析过程)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;ast&nbsp;=&nbsp;parser.parse(body,{&nbsp;sourceType:'module'&nbsp;})</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用@babel/traverse遍历ast,将文件路径保存下来</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用@babel/core&nbsp;@babel/preset-env将ES6&nbsp;-&gt;&nbsp;ES5</p><p>&nbsp;&nbsp;&nbsp;&nbsp;最终返回一个对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file:主模块的路径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps:主模块依赖的路径合集</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;code:ES5代码</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>递归获取依赖deps</p>","important":2}],"js":[{"id":"R0lN9uFihu3_OgiMrJ2YU","title":"闭包","content":"<p>闭包就是函数执行产生的一个私有作用域，在这个作用域中声明的私有变量和外界互不干扰，而且作用域不销毁，这些私有变量存储的值也都保存下来了，所以整体来说<strong>闭包就是为了保护和保存变量</strong></p><p>缺点：滥用闭包导致内存泄露</p>","important":5},{"id":"blTtafxAdZ68uYwegkCVW","title":"内存泄漏","content":"<p>一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束</p>","important":3},{"id":"w248Fzp3Jqw9hYlIiLPnh","title":"作用域和作用域链","content":"<p>作用域：用来隔离变量，不同作用域下的同名变量不会有冲突</p><p>作用域链：在当前作用域中找不到所需变量，就一级一级向上查找，直到找到全局作用域还没有找到，就放弃查找，而这一级一级的关系，就是作用域链</p>","important":5},{"id":"5kxZYMQVMpcFVJAXcsTi0","title":"原型链","content":"<p>它是一种基于__proto__（原型）向上查找的机制，当我们操作实例的某个属性或者方法时，首先找自己空间的私有属性或者方法，找到了，则查找结束</p><p>没有找到，则基于原型找到所属类的prototype，如果还没找到，基于原型上的原型继续向上查找，一直找到Object.prototype为止</p><p><strong>prototype是函数才有的属性</strong></p><p><strong>__proto__是每个对象都有的属性</strong></p><p><strong>null&nbsp;没有原型，并作为所有原型链中的最后一个环节</strong></p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Fn()&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;fn&nbsp;=&nbsp;new&nbsp;Fn()\n&nbsp;&nbsp;&nbsp;&nbsp;Fn.prototype===fn.__proto__&nbsp;//true\n</pre>","important":5},{"id":"L448A1ZwKJF75syrWz24A","title":"this指向","content":"<ol><li>事件绑定方法\t<strong>this-&gt;绑定的方法</strong></li><li>普通函数执行\t<strong>this-&gt;执行的主体</strong></li><li>构造函数执行\t<strong>this-&gt;当前实例</strong></li><li>call/apply/bind\t<strong>this-&gt;传入的参数</strong></li><li>箭头函数执行\t<strong>this-&gt;上下文</strong></li><li>括号表达式(null,obj.fn)()\t<strong>this-&gt;window</strong></li></ol>","important":5},{"id":"JWDJqmNi_pIPWVy_U6ZCv","title":"new操作符","content":"<p>创建一个空对象，将它的引用赋给&nbsp;this，继承函数的原型</p><p>将&nbsp;this&nbsp;指向这个对象</p><p>通过&nbsp;this&nbsp;将属性和方法添加至这个对象</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();\n&nbsp;&nbsp;&nbsp;&nbsp;o.__proto__&nbsp;=&nbsp;Foo.prototype;\n&nbsp;&nbsp;&nbsp;&nbsp;Foo.call(o);\n</pre>","important":5},{"id":"K3a6H_OFYgJJKvx73jBnF","title":"箭头函数VS普通函数","content":"<ol><li>没有自己的this，而是使用作用域链上一层的this</li><li>没有arguments属性，但可以用...arg作为参数替代</li><li>无法使用yield命令,因为箭头函数不能用作Generator函数</li><li>箭头函数不能被new执行，不能用作构造函数。因为箭头函数没有prototype</li><li>也没有自己的this，不能调用call和apply</li></ol>","important":4},{"id":"EX2EGAmaN0ke0b-mTu87s","title":"面向对象","content":"<p>JS本身就是基于面向对象设计和开发的一门语言，在JS中提供了很多类</p><p>我们基于JS进行产品设计时，都是基于类的实例来完成的，所以我们操作JS就是在面向对象编程。</p>","important":4},{"id":"_jVq3w7_9NDx0d0YTGurR","title":"继承","content":"<p>原型继承&nbsp;</p><pre class=\"ql-syntax\" spellcheck=\"false\">    B.prototype=new&nbsp;A()\n</pre><p>Call继承</p><pre class=\"ql-syntax\" spellcheck=\"false\">    function&nbsp;B(){\n      A.call(this);\n    }\n    new&nbsp;B()&nbsp;//修改this，然后执行A函数，实现了继承\n</pre><p>寄生组合继承</p><pre class=\"ql-syntax\" spellcheck=\"false\">    B.prototype=Object.create(A.prototype)\n</pre><p>ES6继承</p><pre class=\"ql-syntax\" spellcheck=\"false\">    class&nbsp;Fn{\n    &nbsp;&nbsp;&nbsp;&nbsp;constructor(n.m)\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x=n;\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y=m;\n    &nbsp;&nbsp;&nbsp;&nbsp;}\n    }\n    let&nbsp;f=new&nbsp;Fn(10,20)\n</pre>","important":4},{"id":"UYrEnvrJfzELdM9Jk_AoZ","title":"浅克隆与深克隆","content":"<p>复制地址</p><pre class=\"ql-syntax\" spellcheck=\"false\">    let obj2=obj1\n</pre><p>浅克隆1</p><pre class=\"ql-syntax\" spellcheck=\"false\">    let obj2={...obj1}\n</pre><p>浅克隆2</p><pre class=\"ql-syntax\" spellcheck=\"false\">    let obj2=Object.assign({},obj1)\n</pre><p>深克隆1</p><pre class=\"ql-syntax\" spellcheck=\"false\">    let obj2=JSON.parse(JSON.stringify(obj1))&nbsp; &nbsp; \n    //弊端：函数/日期/正则会出现问题\n</pre><p>深克隆2</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp; &nbsp; function deepClone(obj){\n&nbsp; &nbsp; &nbsp; &nbsp; if(obj===null) return null;\n&nbsp; &nbsp; &nbsp; &nbsp; if(typeof obj!=='object') return obj;\n&nbsp; &nbsp; &nbsp; &nbsp; if(obj instanceof RegExp){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new RegExp(obj);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; if(obj instanceof Date){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return new Date(obj);\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; //使得克隆的结果和之前保持相同的所属类\n&nbsp; &nbsp; &nbsp; &nbsp; let newObj=new obj.constructor;\n&nbsp; &nbsp; &nbsp; &nbsp; for(let key in obj){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(obj.hasOwnProperty(key)){\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; newObj[key]=deepClone(obj[key]);\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; return newObj;\n&nbsp; &nbsp; }\n</pre>","important":5},{"id":"56xxdtF86pjxDp2GSspRO","title":"for in和for of","content":"<p>for&nbsp;in</p><p>\t遍历对象的索引(包括自定义)</p><p>for of</p><p>\t遍历数组的值(不包括自定义)</p>","important":2},{"id":"liAmsDDWBEvmSFSxFtEiP","title":"变量声明","content":"<ul><li>var在执行前完成了声明和初始化</li><li>function声明、初始化和赋值一开始就全部完成</li><li>let/const只完成声明，没有初始化，因此在初始化前访问，会报错(暂时性死区)</li><li>let&nbsp;const&nbsp;class都会暂时性死区</li><li>const变量的内部状态是可修改的，因此可以被用于声明可变对象</li></ul>","important":3},{"id":"af49Lrp6uGQYEkNEkJbd2","title":"mouseover和mouseenter","content":"<ul><li>mouseover和mouseenter都是鼠标滑过触发</li><li>mouseover-mouseout</li><li>mouseenter-mouseleave</li><li>区别在于mouseenter阻止了冒泡的过程，所以我在项目中一般都使用mouseenter</li></ul>","important":3},{"id":"V6o4ok1pJxx_unS55K-N0","title":"bind，call，apply的区别","content":"<ul><li>bind改变this不会执行，而是返回一个新的函数</li><li>bind的参数类似于ES6中的展开运算符</li><li>call和apply改变this并执行</li><li>call的参数类似于ES6中的展开运算符</li><li>apply的参数是数组</li></ul>","important":3},{"id":"wBK1KXw-XxFXZAbL_9PEu","title":"盒子模型属性","content":"<p>clientWidth/clientHeight&nbsp;一屏幕可视区域的宽高</p><p>offsetWidth/offsetHeight&nbsp;在client的基础上加上border&nbsp;滚动条</p><p>scrollWidth/scrollHeight&nbsp;真实页面宽高（+溢出的内容）</p><p><br></p><p>clientTop/clientLeft&nbsp;边框的宽度</p><p>offsetTop/offsetLeft&nbsp;距离父级参照物的偏移</p><p>scrollTop/scrollLeft&nbsp;滚动条卷去的宽高</p>","important":3},{"id":"DpdUfBilzQq61fS3QMoYZ","title":"事件原理","content":"<p>一个完整的事件流分为捕获过程，目标过程，冒泡过程，由window开始，最后回到window的过程</p><p>DOM1采用直接给事件赋值的方式，所有只能绑定一个事件</p><p>DOM2采用往事件池中添加方法的方式，所有可以注册多个事件</p>","important":2},{"id":"jrDxEPk6mDE_d55qXP-IK","title":"事件代理","content":"<p>又称之为事件委托</p><p>是把原本需要绑定的事件委托给父元素，事件代理的原理是DOM元素的事件冒泡</p><p>使用事件代理可以大量节省内存占用，减少事件注册</p><p>且无须对新增子对象进行绑定</p>","important":2},{"id":"5uufrbn9xl5fERthExWqC","title":"数据类型检测","content":"<p>typeof&nbsp;a:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;检测除null以外的基本数据类型，还能返回object和function</p><p>a&nbsp;instanceof&nbsp;Array:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;通过查找原型链上的prototype</p><p>a.constructor===Object:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;constructor不稳定，重写prototype后消失，而且不能检测null和undefined</p><p>&nbsp;&nbsp;&nbsp;&nbsp;因此在重写对象原型时一般都需要重新给&nbsp;constructor&nbsp;赋值</p><p>Object.prototype.toString.call(a):</p><p>&nbsp;&nbsp;&nbsp;&nbsp;遍历原型链，都能检测，但无法区分自定义对象</p>","important":3},{"id":"qLAhuhpAG2TNDvawiPfCn","title":"微任务和宏任务","content":"","important":1},{"id":"jaah1TrNVRs59VEsVuWcQ","title":"Number类型","content":"<p>浮点数问题</p>","important":5},{"id":"7WJIewgts8a3prvs0B8Yh","title":"String类型","content":"<p>字符串无法通过索引修改值</p>","important":5},{"id":"4kaMSdCoy_Ix632uJlvLX","title":"Boolean类型","content":"","important":5},{"id":"RA1Yu84zwDpT1y3pszH-W","title":"Undefined和Null类型","content":"","important":5},{"id":"rUum3kUoSXk9vIL0Nd7NF","title":"Object类型","content":"<p>对象的属性名可以是数字、字符串、Symbol</p><p><br></p>","important":5},{"id":"4a0_xdXKLmkgxo_CXW61P","title":"Function类型","content":"","important":5},{"id":"YTcC3oWa_UsQO8Nn8OA0t","title":"Array类型","content":"","important":5},{"id":"4K_E6HZLadn1d1k03M8B4","title":"Symbol类型","content":"","important":5}],"http":[{"id":"6vH4bfnojv8zbZ7jdco8K","title":"浏览器输入一个网址","content":"<p>HTTP请求阶段</p><p>&nbsp;&nbsp;&nbsp;&nbsp;浏览器发送请求给DNS域名解析服务器，根据域名在DNS服务器中找到对应的外网IP=&gt;2次往返</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过TCP与服务器建立连接=&gt;3次往返</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(https增加TLS协商)=&gt;5次往返</p><p>&nbsp;&nbsp;&nbsp;&nbsp;通过外网IP向服务器发送请求</p><p>&nbsp;&nbsp;&nbsp;&nbsp;通过URL地址的端口号，找到对应服务以及服务所管理的项目源文件</p><p><br></p><p>HTTP响应阶段</p><p>&nbsp;&nbsp;&nbsp;&nbsp;服务端根据URL中的各种参数，把客户端需要的内容进行准备和处理</p><p>&nbsp;&nbsp;&nbsp;&nbsp;之后把准备的内容响应给客户端</p><p><br></p><p>浏览器渲染阶段</p><p>&nbsp;&nbsp;&nbsp;&nbsp;根据返回的HTML页面计算DOM结构，生成DOM&nbsp;Tree</p><p>&nbsp;&nbsp;&nbsp;&nbsp;自上而下运行代码，加载CSS/JS等资源</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async&nbsp;script&nbsp;异步</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defer&nbsp;script&nbsp;延迟</p><p>&nbsp;&nbsp;&nbsp;&nbsp;根据CSS生成带样式的Render&nbsp;Tree</p><p>&nbsp;&nbsp;&nbsp;&nbsp;开始渲染和绘制</p>","important":5},{"id":"AbaKhEaDv12Wvthszwezr","title":"前端性能优化","content":"<p>减少HTTP请求次数和请求大小</p><p>&nbsp;&nbsp;&nbsp;&nbsp;静态资源文件304缓存</p><p>&nbsp;&nbsp;&nbsp;&nbsp;CSS&nbsp;sprite/SVG</p><p>&nbsp;&nbsp;&nbsp;&nbsp;localStorage本地存储</p><p>&nbsp;&nbsp;&nbsp;&nbsp;尽量合并CSS和JS文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>代码优化</p><p>&nbsp;&nbsp;&nbsp;&nbsp;少用闭包</p><p>&nbsp;&nbsp;&nbsp;&nbsp;减少DOM重绘和回流</p><p>&nbsp;&nbsp;&nbsp;&nbsp;封装JS，减少冗余代码</p><p>&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame代替定时器动画</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><p>DNS及HTTP通信方式的优化</p><p>&nbsp;&nbsp;&nbsp;&nbsp;图片懒加载</p><p>&nbsp;&nbsp;&nbsp;&nbsp;异步获取数据，延迟分批加载</p><p>&nbsp;&nbsp;&nbsp;&nbsp;CDN加速</p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p>","important":4},{"id":"S4Pg_0o-HeScLvQCo3lzG","title":"浏览器缓存","content":"<p>cookie:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;兼容所有浏览器</p><p>&nbsp;&nbsp;&nbsp;&nbsp;存储空间4KB</p><p>&nbsp;&nbsp;&nbsp;&nbsp;有过期时间</p><p>&nbsp;&nbsp;&nbsp;&nbsp;会被垃圾清理强制清除</p><p>&nbsp;&nbsp;&nbsp;&nbsp;需要与服务器来回传输</p><p>localStorage:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不兼容IE8及以下</p><p>&nbsp;&nbsp;&nbsp;&nbsp;存储空间5MB</p><p>&nbsp;&nbsp;&nbsp;&nbsp;本地永久存储</p><p>&nbsp;&nbsp;&nbsp;&nbsp;旧版本不会清除localstorage</p><p>&nbsp;&nbsp;&nbsp;&nbsp;与服务器无关</p><p>sessionStorage:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;页面刷新时会话保持</p><p>&nbsp;&nbsp;&nbsp;&nbsp;页面关闭信息清除</p><p>&nbsp;&nbsp;&nbsp;&nbsp;新标签打开页面时会复制顶级浏览会话的上下文作为自己的上下文</p><p>&nbsp;&nbsp;&nbsp;&nbsp;打开多个相同页面会创建各自的sessionStorage</p>","important":5}],"css":[{"id":"Bl-8FZNil4Y70qzHPLjLi","title":"元素隐藏","content":"<p>display:none;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不占空间，不能点击，触发回流</p><p>visibility:&nbsp;hidden;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;占据空间，不能点击，触发重绘</p><p>opacity:&nbsp;0;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;占据空间，能点击，触发重绘</p><p>&nbsp;&nbsp;&nbsp;&nbsp;animation修改opacity只触发GPU加速，不触发重绘</p><p>filter:&nbsp;opacity(0%);</p>","important":3},{"id":"r_h_Fb-39bKo4r9Hgzv3L","title":"盒子水平居中","content":"<p>基于绝对定位：固定宽高</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.box&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom:&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;auto;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;\n</pre><p>基于绝对定位：transform</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.box&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;50%;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;50%;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transform:&nbsp;translate(-50%,&nbsp;-50%);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;\n</pre><p>JS实现</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;HTML&nbsp;=&nbsp;document.documentElement,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winW&nbsp;=&nbsp;HTML.clientWidth,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winH&nbsp;=&nbsp;HTML.clientHeight,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boxW&nbsp;=&nbsp;box.offsetWidth,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boxH&nbsp;=&nbsp;box.offsetHeight;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.style.position&nbsp;=&nbsp;\"absolute\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.style.left&nbsp;=&nbsp;(winW&nbsp;-&nbsp;boxW)&nbsp;/&nbsp;2&nbsp;+&nbsp;'px';\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;box.style.top&nbsp;=&nbsp;(winH&nbsp;-&nbsp;boxH)&nbsp;/&nbsp;2&nbsp;+&nbsp;'px';&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;\n</pre><p>display:flex</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;flex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100vh;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;\n</pre><p>display:table-cell</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;table-cell;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:&nbsp;middle;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;固定宽高&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100vw;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100vh;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;.box{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:inline-block;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":5},{"id":"q7l94V1DTDRvWm4aFrbQx","title":"BFC","content":"<p>BFC&nbsp;就是块级格式上下文，是页面盒模型布局中的一种&nbsp;CSS&nbsp;渲染模式，相当于一个独立的容器，里面的元素和外部的元素相互不影响</p><p>属于同一个BFC的两个相邻的标签的margin会发生重叠，因此需要创建不同的BFC</p><p>只要元素触发以下任意一条,&nbsp;便视其具有&nbsp;BFC&nbsp;特性.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;根元素.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;浮动元素:&nbsp;float&nbsp;除&nbsp;none&nbsp;以外的值.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;绝对定位元素:&nbsp;position&nbsp;为&nbsp;(absolute&nbsp;||&nbsp;fixed).</p><p>&nbsp;&nbsp;&nbsp;&nbsp;display&nbsp;为&nbsp;(inline-block&nbsp;||&nbsp;table-cells&nbsp;||&nbsp;flex).</p><p>&nbsp;&nbsp;&nbsp;&nbsp;overflow&nbsp;除了&nbsp;visible&nbsp;以外的值&nbsp;(hidden&nbsp;||&nbsp;auto&nbsp;||&nbsp;scroll).</p>","important":4},{"id":"4VK03X6-nY4j1FqCRpcYA","title":"重绘和回流","content":"<p>重绘：样式改变repaint</p><p>回流：布局改变reflow</p><p>回流必定会发生重绘，重绘不一定会引发回流</p><p>现代浏览器使用队列机制批量更新布局</p><p>CSS优化：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用transform代替top</p><p>&nbsp;&nbsp;&nbsp;&nbsp;使用visibility-重绘&nbsp;代替display:none-回流</p><p>&nbsp;&nbsp;&nbsp;&nbsp;尽可能在DOM树末端修改样式</p><p>&nbsp;&nbsp;&nbsp;&nbsp;CSS从右往左匹配，避免节点层级过多</p><p>&nbsp;&nbsp;&nbsp;&nbsp;控制动画速度可以选择&nbsp;requestAnimationFrame</p><p>&nbsp;&nbsp;&nbsp;&nbsp;CSS3硬件加速</p><p>JS优化：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;对复杂动画使用绝对定位，使其脱离文档流</p><p>&nbsp;&nbsp;&nbsp;&nbsp;如需频繁读取，将变量缓存</p>","important":4},{"id":"ZsR6xmEMVOV19qWO4fFKT","title":"盒子模型","content":"<p>标准模型&nbsp;box-sizing:content-box</p><p>&nbsp;&nbsp;&nbsp;&nbsp;一个块的宽度&nbsp;=&nbsp;width+padding(内边距)+border(边框)+margin(外边距)；</p><p>怪异盒子模型&nbsp;box-sizing:border-box</p><p>&nbsp;&nbsp;&nbsp;&nbsp;一个块的宽度&nbsp;=&nbsp;width+margin(外边距)(width包含了border以及padding);</p><ul><li>IE盒子模型</li><li>flex盒子模型</li><li>多列布局</li></ul>","important":3},{"id":"Nws_f9oaF5s8qstYZPugh","title":"紧贴底部的footer(Sticky Footer布局)","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;body{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:flex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex-flow:column;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min-height:100vh;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;main{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex:1;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;footer{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min-height:100px;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":5},{"id":"4qLXxYAn5bSf7tqY1u7JF","title":"flex控制布局顺序(模拟圣杯)","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;main{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;flex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;stretch;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;.left{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:200px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order:-1;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;值越大越靠后&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;.middle{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex:1;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;.right{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:200px;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":3},{"id":"6doua8dJR1S17vCalKUz3","title":"文字模糊","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;transparent;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-shadow:&nbsp;#111&nbsp;0&nbsp;0&nbsp;5px;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":3},{"id":"U2gXpS-DA5Vjz1Q5-LwiP","title":"水平居中兼容性方案","content":"<p>方案1</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.parent{text-align:&nbsp;center;}\n&nbsp;&nbsp;&nbsp;&nbsp;.child{display:&nbsp;inline-block;}\n</pre><p>方案2</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.parent{text-align:&nbsp;center;}\n&nbsp;&nbsp;&nbsp;&nbsp;.child{width:200px;margin:0&nbsp;auto;}\n</pre>","important":5},{"id":"0IrkcMtf-pV9vQC_E8_0K","title":"动态宽度","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.tag{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;clamp(100px,&nbsp;50vw,&nbsp;500px);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;类似于\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;min-width:100px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;width:50vw;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;max-width:500px;\n&nbsp;&nbsp;&nbsp;&nbsp;*/\n</pre>","important":2},{"id":"GajnJdm1itnx7uQtH53Pa","title":"实时编辑CSS","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;style=\"display:block\"&nbsp;contentEditable&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;body&nbsp;{&nbsp;color:&nbsp;blue&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;\n</pre>","important":2},{"id":"gHRBePCKzSDo4GDVueOLU","title":"flex排序自动对齐","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.flex-container{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;flex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex-wrap:&nbsp;wrap;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gap:&nbsp;10px&nbsp;20px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;设置网格行列之间的间隙&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100%;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min-height:&nbsp;300px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;bisque;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;.flex-item{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flex:&nbsp;0&nbsp;1&nbsp;calc((100%&nbsp;-&nbsp;60px)&nbsp;/&nbsp;4);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;yellow;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":3},{"id":"pn7lxSG2V4ET2ndNknW6t","title":"logo自动对齐排列颜色混合","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;.brands&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;grid;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-template-columns:&nbsp;repeat(auto-fit,&nbsp;minmax(150px,&nbsp;1fr));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;1fr自动分配剩余空间&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid-gap:&nbsp;10px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list-style-type:&nbsp;none;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;.brands-item&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background:&nbsp;#eee;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;.brands-item&nbsp;a&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display:&nbsp;flex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;justify-content:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align-items:&nbsp;center;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100%;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;.brands-item&nbsp;img&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;80px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;80px;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object-fit:&nbsp;contain;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mix-blend-mode:&nbsp;multiply;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;CSS混合模式&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>","important":2}],"git":[{"id":"9Q9E9XJwnlGsGeeZ09-mt","title":"生成React项目","content":"<p>22</p>","important":2},{"id":"wXiJirqo-ZD5QCEgtlSzk","title":"生成React Native项目","content":"<p>JS版本</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;npx&nbsp;react-native&nbsp;init&nbsp;AwesomeProject\n</pre><p>TS版本</p><pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;npx&nbsp;react-native&nbsp;init&nbsp;AwesomeProject&nbsp;--template&nbsp;react-native-template-typescript\n</pre>","important":1},{"id":"8ItvvRzzi6UwYiun0eE8l","title":"生成Vue项目","content":"","important":1},{"id":"sXGzf7otS0xHtPe3Ix0fW","title":"生成TS-Node项目","content":"","important":1}],"html":[{"id":"QuuyOBOFbzOZJajiEL9KO","title":"标签语义化","content":"<p>合理的标签做合适的事情</p><p>块状标签&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">h1</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>~<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">h6</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">div</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">p</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>等&nbsp;</p><p>行内标签&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">a</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">span</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">i</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span></p><p>行内-块状标签&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">img</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span>&nbsp;<span style=\"color: rgb(128, 128, 128);\">&lt;</span><span style=\"color: rgb(86, 156, 214);\">input</span><span style=\"color: rgb(128, 128, 128);\">&gt;</span></p><p>行内标签不能独占一行，没有宽高</p>","important":2},{"id":"eLkuJHCn2_9VxTH4HE8iG","title":"Canvas标签","content":"<pre class=\"ql-syntax\" spellcheck=\"false\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas&nbsp;id=\"tutorial\"&nbsp;width=\"300\"&nbsp;height=\"150\"&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你的浏览器不支持canvas,请升级你的浏览器\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/canvas&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;draw(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;canvas&nbsp;=&nbsp;document.getElementById('tutorial')\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(!canvas.getctx)&nbsp;return\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;ctx&nbsp;=&nbsp;canvas.getContext(\"2d\")\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//开始代码\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre><p>——————————————————————————————————</p><p>基本篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**IE8以下支持canvas**</strong>/</p><p>https://github.com/arv/explorercanvas</p><p>引入js包</p><p><span style=\"color: rgb(106, 153, 85);\">&lt;!--[if&nbsp;lte&nbsp;IE&nbsp;8]&gt;&lt;script&nbsp;type=\"text/javascript\"&nbsp;src=\"excanvas.js\"&gt;&lt;/script&gt;&lt;![endif]--&gt;</span></p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘图环境宽高，效果相同**</strong>/</p><p>canvas.width</p><p>canvas.height</p><p>ctx.canvas.width/ctx.canvas.height</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘图环境状态保存和恢复**</strong>/</p><p>ctx.save();</p><p>ctx.restore();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘图拷贝和粘贴**</strong>/</p><p>let&nbsp;imgData=ctx.getImageData(10,10,50,50);</p><p>ctx.putImageData(imgData,10,70);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**清空全部canvas的像素内容**</strong>/</p><p>ctx.clearRect(0,&nbsp;0,&nbsp;canvas.width,&nbsp;canvas.height);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**返回canvas真实坐标x,y**</strong>/</p><p>function&nbsp;windowToCanvas(canvas,x=e.clientX,y=e.clientY)&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//通过API获取DOMRect对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;bbox&nbsp;=&nbsp;canvas.getBoundingClientRect();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//扣除当前对象的left,top</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x:x-bbox.left*(canvas.width/bbox.width),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y:y-bbox.top*(canvas.height/bbox.height)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>}</p><p>——————————————————————————————————</p><p>图片篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**返回包含图片的data&nbsp;URL**</strong>/</p><p><strong style=\"color: rgb(86, 156, 214);\">----------------------------------------------------------------</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;适合小图片/同步加载/任意浏览器中使用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;图片的类型默认为&nbsp;image/png</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"data:\"&nbsp;+&nbsp;mimeType&nbsp;+&nbsp;\";base64,\"&nbsp;+&nbsp;base64Encode(encodedImage);</p><p><strong style=\"color: rgb(86, 156, 214);\">----------------------------------------------------------------</strong></p><p>let&nbsp;fullQuality&nbsp;=&nbsp;canvas.toDataURL('image/jpeg',1);</p><p>let&nbsp;lowQuality&nbsp;=&nbsp;canvas.toDataURL('image/webp',0.1);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**返回包含图片的Blob**</strong>/</p><p><strong style=\"color: rgb(86, 156, 214);\">----------------------------------------------------------------</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;适合大图片/异步加载/仅应用内部使用</p><p>&nbsp;&nbsp;&nbsp;&nbsp;全称:Binary&nbsp;Large&nbsp;Object(File继承自Blob)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;图片的类型默认为&nbsp;image/png，分辨率为96dpi</p><p>&nbsp;&nbsp;&nbsp;&nbsp;resultBlob&nbsp;=&nbsp;File.create(encodedImage.data(),&nbsp;encodedImage.size(),&nbsp;encodingMimeType);</p><p><strong style=\"color: rgb(86, 156, 214);\">----------------------------------------------------------------</strong></p><p><br></p><p>function&nbsp;blobCallback(blob){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//创建一个img标签</p><p>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;newImg&nbsp;=&nbsp;document.createElement(\"img\"),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以blob对象为基础创建一个url</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url&nbsp;=&nbsp;URL.createObjectURL(blob);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log(url);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;console.log(blob);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//加载后销毁</p><p>&nbsp;&nbsp;&nbsp;&nbsp;newImg.onload&nbsp;=&nbsp;function&nbsp;()&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;no&nbsp;longer&nbsp;need&nbsp;to&nbsp;read&nbsp;the&nbsp;blob&nbsp;so&nbsp;it's&nbsp;revoked</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;URL.revokeObjectURL(url);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;};</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//img标签属性赋值</p><p>&nbsp;&nbsp;&nbsp;&nbsp;newImg.src&nbsp;=&nbsp;url;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;//添加为子元素</p><p>&nbsp;&nbsp;&nbsp;&nbsp;document.body.appendChild(newImg);</p><p>}</p><p>canvas.toBlob((blob)=&gt;{blobCallback(blob)},&nbsp;\"image/jpeg\",&nbsp;0.95);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘制图片**</strong>/</p><p>ctx.drawImage(image,&nbsp;x,&nbsp;y，width,height)</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**图像重复**</strong>/</p><p>ctx.createPattern(image,&nbsp;repeat)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;repeat&nbsp;全部重复</p><p>&nbsp;&nbsp;&nbsp;&nbsp;repeat-x&nbsp;沿x轴重复</p><p>&nbsp;&nbsp;&nbsp;&nbsp;repeat-y&nbsp;沿y轴重复</p><p>&nbsp;&nbsp;&nbsp;&nbsp;no-repeat&nbsp;不重复</p><p>——————————————————————————————————</p><p>通用篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**全局透明度**</strong>/</p><p>ctx.globalAlpha&nbsp;=&nbsp;0.5;</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置或返回填充canvas的颜色、渐变、模式**</strong>/</p><p>ctx.fillStyle&nbsp;=&nbsp;'cornflowerblue';</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**用于设置或返回笔触的颜色、渐变、模式**</strong>/</p><p>ctx.strokeStyle&nbsp;=&nbsp;'blue';</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置填充渐变**</strong>/</p><p>gradient&nbsp;=&nbsp;ctx.createLinearGradient(start-x,start-y,end-x,end-y);</p><p>gradient.addColorStop(0,&nbsp;'blue');</p><p>gradient.addColorStop(0.25,&nbsp;'white');</p><p>gradient.addColorStop(0.5,&nbsp;'purple');</p><p>gradient.addColorStop(0.75,&nbsp;'red');</p><p>gradient.addColorStop(1,&nbsp;'yellow');</p><p>ctx.fillStyle=gradient;</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**旋转/缩放/平移/水平镜像/垂直镜像**</strong>/</p><p>ctx.rotate(-Math.PI/8);</p><p>ctx.scale(2,2);</p><p>ctx.translate(30,30);</p><p>ctx.scale(1,-1);</p><p>ctx.scale(-1,1);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**存为Path2D对象**</strong>/</p><p>let&nbsp;rectangle&nbsp;=&nbsp;new&nbsp;Path2D();</p><p>rectangle.rect(10,&nbsp;10,&nbsp;50,&nbsp;50);</p><p>ctx.stroke(rectangle);</p><p>——————————————————————————————————</p><p>字体篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置字体格式**</strong>/</p><p>ctx.font&nbsp;=&nbsp;'38pt&nbsp;Arial';</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置文字的内容和位置**</strong>/</p><p>ctx.fillText('Hello&nbsp;World',&nbsp;canvas.width&nbsp;/&nbsp;2&nbsp;-&nbsp;150,&nbsp;canvas.height&nbsp;/&nbsp;2&nbsp;+&nbsp;15);</p><p>ctx.strokeText(\"Hello&nbsp;World\",&nbsp;canvas.width&nbsp;/&nbsp;2&nbsp;-&nbsp;150,&nbsp;canvas.height&nbsp;/&nbsp;2&nbsp;+&nbsp;15);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**检查字体的宽度**</strong>/</p><p>ctx.measureText('Hello&nbsp;World').width</p><p>——————————————————————————————————</p><p>线条篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置线条宽度**</strong>/</p><p>ctx.lineWidth&nbsp;=&nbsp;0.5;</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘制线条**</strong>/</p><p>ctx.beginPath();</p><p>//通过给x+0.5,y+0.5实现抗锯齿，使线条更加平滑</p><p>ctx.moveTo(x+0.5,y+0.5);</p><p>ctx.lineTo(x+0.5,y+0.5);</p><p>ctx.stroke();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**闭合路径**</strong>/</p><p>ctx.closePath();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置虚线模式**</strong>/</p><p>ctx.setLineDash([<span style=\"color: rgb(206, 145, 120);\">5,4,3</span>]);</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置虚线偏移量(动态)**</strong>/</p><p>offset+=3.0;</p><p>ctx.lineDashOffset=offset;</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置线段端点**</strong>/</p><p>ctx.lineCap='butt';</p><p>ctx.lineCap='round';</p><p>ctx.lineCap='square';</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置线段连接点**</strong>/</p><p>ctx.lineJoin='round';</p><p>ctx.lineJoin='bevel';</p><p>ctx.lineJoin='miter';</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**判断路径中是否包含监测点**</strong>/</p><p>ctx.isPointInPath(x,y)</p><p>——————————————————————————————————</p><p>图形篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**描边-&gt;空心**</strong>/</p><p>ctx.stroke();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**填充-&gt;实心**</strong>/</p><p>ctx.fill();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘制圆形**</strong>/</p><p>ctx.beginPath();</p><p>ctx.arc(x,&nbsp;y,&nbsp;radius,&nbsp;startAngle,&nbsp;endAngle,&nbsp;anticlockwise)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**</p><p>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;x,y指定圆心</p><p>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;radius为半径</p><p>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;startAngle,endAngle为起始点和终点,整圆值为0,Math.PI&nbsp;*&nbsp;2</p><p>&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;anticlockwise是否顺时针</p><p>&nbsp;&nbsp;&nbsp;&nbsp;*/</p><p>&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**绘制圆弧**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//方法1</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(100,&nbsp;100,&nbsp;50,&nbsp;Math.PI&nbsp;/&nbsp;4,&nbsp;Math.PI,&nbsp;false);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//方法2</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(100,&nbsp;20);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//起始点(100,20),A点(130,20),B点(130,50)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arcTo(100+30,20,100+30,20+30,30);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**二次贝塞尔曲线**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//控制点120.5,180&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//结束点200.5,180</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(120.5,130);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.quadraticCurveTo(120.5,180,200.5,180);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**三次贝塞尔曲线**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(20,20)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.bezierCurveTo(20,100,200,100,200,20)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**绘制圆形剪纸**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//利用非零环绕规则：两个图形绘画方向相反，则计算差值</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(300,&nbsp;190,&nbsp;150,&nbsp;0,&nbsp;Math.PI&nbsp;*&nbsp;2,&nbsp;false);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(300,&nbsp;190,&nbsp;120,&nbsp;0,&nbsp;Math.PI&nbsp;*&nbsp;2,&nbsp;true);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**设置外角类型**</strong>/</p><p>ctx.lineJoin='round'</p><p><br></p><p>/<strong style=\"color: rgb(86, 156, 214);\">**绘制矩形**</strong>/</p><p>ctx.strokeRect(x,&nbsp;y,&nbsp;width,&nbsp;height)</p><p>ctx.fillRect(x,&nbsp;y,&nbsp;width,&nbsp;height)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**绘制阴影矩形**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//禁用阴影：shadowColor:undefine;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.shadowColor=\"rgba(0,0,0,0.75)\";</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//阴影水平偏移</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.shadowOffsetX=5;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//阴影垂直偏移</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.shadowOffsetY=5;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//越大越模糊</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.shadowBlur=5;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeRect(x,&nbsp;y,&nbsp;width,&nbsp;height)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(x,&nbsp;y,&nbsp;width,&nbsp;height)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;/**逆时针绘制矩形**/</p><p>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;rect(x,y,w,h,direction)&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(direction){</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(x,y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x,y+h);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x+w,y+h);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x+w,y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(x,y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x&nbsp;+&nbsp;w,&nbsp;y);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x&nbsp;+&nbsp;w,&nbsp;y&nbsp;+&nbsp;h);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x,&nbsp;y&nbsp;+&nbsp;h);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>——————————————————————————————————</p><p>事件篇</p><p>/<strong style=\"color: rgb(86, 156, 214);\">**鼠标事件**</strong>/</p><p>canvas.addEventListener('mousedown',function&nbsp;(event){})</p><p><br></p><p>canvas.addEventListener('mousemove',function&nbsp;(event){})</p><p><br></p><p>canvas.addEventListener('mouseup',function&nbsp;(event){})</p><p><br></p><p>canvas.addEventListener('mouseout',function&nbsp;(event){})</p><p><br></p><p>window.addEventListener('keydown',function&nbsp;(event){},true);</p><p><br></p><p>window.addEventListener('keypress',function&nbsp;(event){},true);</p><p><br></p><p>window.addEventListener('keyup',function&nbsp;(event){},true);</p><p>——————————————————————————————————</p><p>canvas跟img标签，唯一的不同就是它并没有src和alt属性</p><p>canvas只有两个属性width和height，默认值为300*150</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;canvas基础</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于canvas来说，左上角的坐标是(0,0)</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线条基础：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三件套：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveTo&nbsp;=&gt;画笔定位(必须，否则lineTo无效)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineTo&nbsp;=&gt;路径运动</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineWidth&nbsp;=&gt;线条宽度</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineCap&nbsp;=&gt;线条端点形状</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获值round|square|butt</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineJoin&nbsp;=&gt;线条交界处外角类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;miter|round|bevel</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stroke=&gt;描边方法</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeStyle&nbsp;=&gt;设置颜色</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获值形式color|gradient|pattern</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;多线条：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beginPath=&gt;告诉canvas我们要绘制一条全新路径，防止之前效果被污染</p><p><br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;矩形基础：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三件套：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fillRect&nbsp;=&gt;绘制填充矩形</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeRect&nbsp;=&gt;绘制边框矩形</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect&nbsp;=&gt;清除矩形区域</p>","important":5}],"ts":[]}]